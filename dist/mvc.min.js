(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var Events_1 = require('./Events');
var Util_1 = require('./Util');
var Controller = (function () {
    function Controller(options) {
        this.channels = {};
        this.eventNumber = 0;
        this.id = Util_1.Util.uniqueId('controller');
        Util_1.Util.extend(this, options);
        if (this.events) {
            this.handleEvents();
        }
    }
    Controller.prototype.handleEvents = function () {
        var _this = this;
        var parts;
        var selector;
        var eventType;
        Util_1.Util.each(this.events, function (eventName, method) {
            parts = eventName.split('.');
            selector = parts[0];
            eventType = parts[1];
            console.log(Util_1.Util.domSelector(selector));
            Util_1.Util.each(Util_1.Util.domSelector(selector), function ($node) {
                console.log($node);
                $node.addEventListener(eventType, _this[method].bind(_this));
            });
        });
    };
    return Controller;
}());
exports.Controller = Controller;
Util_1.Util.applyMixins(Controller, [Events_1.Events]);
},{"./Events":2,"./Util":4}],2:[function(require,module,exports){
"use strict";
var Events = (function () {
    function Events() {
    }
    Events.prototype.trigger = function (eventName, data) {
        for (var topic in this.channels) {
            if (this.channels.hasOwnProperty(topic)) {
                if (topic.split('-', 2).join('-') === eventName) {
                    this.channels[topic](data) !== false || this.off(topic);
                }
            }
        }
    };
    Events.prototype.on = function (eventName, callback) {
        this.channels[eventName + --this.eventNumber] = callback;
    };
    ;
    Events.prototype.off = function (topic) {
        delete this.channels[topic];
    };
    ;
    return Events;
}());
exports.Events = Events;
},{}],3:[function(require,module,exports){
"use strict";
var Events_1 = require('./Events');
var Util_1 = require('./Util');
var Model = (function () {
    function Model(attributes) {
        this.channels = {};
        this.eventNumber = 0;
        this.id = Util_1.Util.uniqueId('model');
        this.attributes = attributes || {};
    }
    Model.prototype.set = function (attributes) {
        Util_1.Util.extend(this.attributes, attributes);
        this.change(attributes);
    };
    Model.prototype.get = function (attributeName) {
        return this.attributes[attributeName];
    };
    Model.prototype.change = function (attributes) {
        this.trigger(this.id + 'update', attributes);
    };
    Model.prototype.toJSON = function () {
        return Util_1.Util.clone(this.attributes);
    };
    return Model;
}());
exports.Model = Model;
Util_1.Util.applyMixins(Model, [Events_1.Events]);
},{"./Events":2,"./Util":4}],4:[function(require,module,exports){
"use strict";
var Util = (function () {
    function Util() {
    }
    Util.uniqueId = function (prefix) {
        var charSet = 'abcdefghijklmnopqrstuvwxyz0123456789';
        var len = 8;
        var randomString = '';
        for (var i = 0; i < len; i++) {
            var randomPoz = Math.floor(Math.random() * charSet.length);
            randomString += charSet.substring(randomPoz, randomPoz + 1);
        }
        return prefix + "-" + randomString;
    };
    Util.extend = function (from, to) {
        var i;
        for (i in to) {
            if (to.hasOwnProperty(i)) {
                from[i] = to[i];
            }
        }
        return from;
    };
    Util.clone = function (obj) {
        return Object.clone(obj);
    };
    Util.each = function (obj, callback) {
        if (obj.length) {
            return [].forEach.call(obj, callback);
        }
        else {
            return Object.keys(obj).forEach(function (key) {
                callback(key, obj[key]);
            });
        }
    };
    Util.domSelector = function (selector) {
        return document.querySelectorAll(selector);
    };
    Util.applyMixins = function (derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
                derivedCtor.prototype[name] = baseCtor.prototype[name];
            });
        });
    };
    return Util;
}());
exports.Util = Util;
},{}],5:[function(require,module,exports){
"use strict";
var Events_1 = require('./Events');
var Util_1 = require('./Util');
var View = (function () {
    function View(options) {
        this.channels = {};
        this.eventNumber = 0;
        this.id = Util_1.Util.uniqueId('view');
        Util_1.Util.extend(this, options);
    }
    return View;
}());
exports.View = View;
Util_1.Util.applyMixins(View, [Events_1.Events]);
},{"./Events":2,"./Util":4}],6:[function(require,module,exports){
"use strict";
var Model_1 = require('./Model');
var View_1 = require('./View');
var Controller_1 = require('./Controller');
var homeModel = new Model_1.Model({
    title: 'This is the title',
    updateTitle: function () {
        homeModel.set({ title: homeModel.get('title') + ' UPDATED' });
    }
});
var homeView = new View_1.View({
    el: '#index',
    template: Handlebars.compile('<h1 id="title">{{title}}</h1>'),
    render: function (data) {
        console.log('View about to render.', data);
        document.getElementById('title').innerText = data.title;
    },
    observe: function (model) {
        model.on(model.id + 'update', this.render.bind(this));
        return this;
    }
});
var homeController = new Controller_1.Controller({
    model: homeModel,
    view: homeView,
    events: {
        '#title.click': 'updateTitle'
    },
    updateTitle: function () {
        this.model.attributes.updateTitle();
        return this;
    },
    init: function () {
        this.view.observe(this.model);
        return this;
    }
});
homeController.init();
},{"./Controller":1,"./Model":3,"./View":5}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWIvQ29udHJvbGxlci50cyIsImxpYi9FdmVudHMudHMiLCJsaWIvTW9kZWwudHMiLCJsaWIvVXRpbC50cyIsImxpYi9WaWV3LnRzIiwibGliL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBLHVCQUFxQixVQUFVLENBQUMsQ0FBQTtBQUNoQyxxQkFBbUIsUUFBUSxDQUFDLENBQUE7QUFJNUI7SUFnQkksb0JBQVksT0FBOEI7UUFQbkMsYUFBUSxHQUE4QixFQUFFLENBQUM7UUFDekMsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFPM0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxXQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RDLFdBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3hCLENBQUM7SUFDTCxDQUFDO0lBRVMsaUNBQVksR0FBdEI7UUFBQSxpQkFlQztRQWRHLElBQUksS0FBZSxDQUFDO1FBQ3BCLElBQUksUUFBZ0IsQ0FBQztRQUNyQixJQUFJLFNBQWlCLENBQUM7UUFFdEIsV0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQUMsU0FBaUIsRUFBRSxNQUFjO1lBQ3JELEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQUksQ0FBQyxXQUFXLENBQUMsUUFB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QUFDLEVBQUUsR0FBRyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSixDQUFDLENBQUM7QUFFSCxJQUFJLGNBQWMsR0FBRyxJQUFJLHVCQUFVLENBQUM7SUFDaEMsS0FBSyxFQUFFLFNBQVM7SUFDaEIsSUFBSSxFQUFFLFFBQVE7SUFDZCxNQUFNLEVBQUU7UUFDSixjQUFjLEVBQUUsYUFBYTtLQUNoQztJQUNELFdBQVcsRUFBRTtRQUNULElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNELElBQUksRUFBRTtRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSixDQUFDLENBQUM7QUFFRyxjQUFjLENBQUMsSUFBSSxFQUFHLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IHtFdmVudHN9IGZyb20gJy4vRXZlbnRzJztcclxuaW1wb3J0IHtVdGlsfSBmcm9tICcuL1V0aWwnO1xyXG5pbXBvcnQge01vZGVsfSBmcm9tICcuL01vZGVsJztcclxuaW1wb3J0IHtWaWV3fSBmcm9tICcuL1ZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xsZXIgaW1wbGVtZW50cyBFdmVudHMge1xyXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbW9kZWw6IE1vZGVsO1xyXG4gICAgcHVibGljIHZpZXc6IFZpZXc7XHJcbiAgICBwdWJsaWMgZXZlbnRzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfTtcclxuICAgIHB1YmxpYyBpbml0OiAoKSA9PiB0aGlzO1xyXG4gICAgW2tleTogc3RyaW5nXTogYW55O1xyXG5cclxuICAgIC8vIEJlZ2luIEV2ZW50cyBjbGFzcy5cclxuICAgIHB1YmxpYyBjaGFubmVsczoge1trZXk6IHN0cmluZ106IEZ1bmN0aW9ufSA9IHt9O1xyXG4gICAgcHVibGljIGV2ZW50TnVtYmVyOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIHRyaWdnZXI6IChldmVudE5hbWU6IHN0cmluZywgZGF0YTogYW55KSA9PiB2b2lkO1xyXG4gICAgcHVibGljIG9uOiAoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4gdm9pZDtcclxuICAgIHB1YmxpYyBvZmY6ICh0b3BpYzogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgLy8gRW5kIEV2ZW50cyBjbGFzcy5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiAge1trZXk6IHN0cmluZ106IGFueX0pIHtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbC51bmlxdWVJZCgnY29udHJvbGxlcicpO1xyXG4gICAgICAgIFV0aWwuZXh0ZW5kKHRoaXMsIG9wdGlvbnMpO1xyXG4gICAgICAgIGlmICh0aGlzLmV2ZW50cykge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUV2ZW50cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgaGFuZGxlRXZlbnRzKCkge1xyXG4gICAgICAgIHZhciBwYXJ0czogc3RyaW5nW107XHJcbiAgICAgICAgdmFyIHNlbGVjdG9yOiBzdHJpbmc7XHJcbiAgICAgICAgdmFyIGV2ZW50VHlwZTogc3RyaW5nO1xyXG5cclxuICAgICAgICBVdGlsLmVhY2godGhpcy5ldmVudHMsIChldmVudE5hbWU6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgcGFydHMgPSBldmVudE5hbWUuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgc2VsZWN0b3IgPSBwYXJ0c1swXTtcclxuICAgICAgICAgICAgZXZlbnRUeXBlID0gcGFydHNbMV07XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFV0aWwuZG9tU2VsZWN0b3Ioc2VsZWN0b3IpKTtcclxuICAgICAgICAgICAgVXRpbC5lYWNoKFV0aWwuZG9tU2VsZWN0b3Ioc2VsZWN0b3IpLCAoJG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkbm9kZSk7XHJcbiAgICAgICAgICAgICAgICAkbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgdGhpc1ttZXRob2RdLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuVXRpbC5hcHBseU1peGlucyhDb250cm9sbGVyLCBbRXZlbnRzXSk7XHJcbiIsImV4cG9ydCBjbGFzcyBFdmVudHMge1xyXG4gICAgcHVibGljIGNoYW5uZWxzOiB7W2tleTogc3RyaW5nXTogRnVuY3Rpb259O1xyXG4gICAgcHVibGljIGV2ZW50TnVtYmVyOiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIHRyaWdnZXIoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IHRvcGljIGluIHRoaXMuY2hhbm5lbHMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbm5lbHMuaGFzT3duUHJvcGVydHkodG9waWMpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9waWMuc3BsaXQoJy0nLCAyKS5qb2luKCctJykgPT09IGV2ZW50TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHNbdG9waWNdKGRhdGEpICE9PSBmYWxzZSB8fCB0aGlzLm9mZih0b3BpYyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uKGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNoYW5uZWxzW2V2ZW50TmFtZSArIC0tdGhpcy5ldmVudE51bWJlcl0gPSBjYWxsYmFjaztcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIG9mZih0b3BpYzogc3RyaW5nKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuY2hhbm5lbHNbdG9waWNdO1xyXG4gICAgfTtcclxufVxyXG5cclxuIiwiaW1wb3J0IHtFdmVudHN9IGZyb20gJy4vRXZlbnRzJztcclxuaW1wb3J0IHtVdGlsfSBmcm9tICcuL1V0aWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vZGVsIGltcGxlbWVudHMgRXZlbnRzIHtcclxuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIGF0dHJpYnV0ZXM6IHtba2V5OiBzdHJpbmddOiBhbnl9O1xyXG5cclxuICAgIC8vIEJlZ2luIEV2ZW50cyBjbGFzcy5cclxuICAgIHB1YmxpYyBjaGFubmVsczoge1trZXk6IHN0cmluZ106IEZ1bmN0aW9ufSA9IHt9O1xyXG4gICAgcHVibGljIGV2ZW50TnVtYmVyOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIHRyaWdnZXI6IChldmVudE5hbWU6IHN0cmluZywgZGF0YTogYW55KSA9PiB2b2lkO1xyXG4gICAgcHVibGljIG9uOiAoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4gdm9pZDtcclxuICAgIHB1YmxpYyBvZmY6ICh0b3BpYzogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgLy8gRW5kIEV2ZW50cyBjbGFzcy5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGVzOiB7W2tleTogc3RyaW5nXTogYW55fSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBVdGlsLnVuaXF1ZUlkKCdtb2RlbCcpO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwge307XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldChhdHRyaWJ1dGVzOiB7W2tleTogc3RyaW5nXTogYW55fSkge1xyXG4gICAgICAgIFV0aWwuZXh0ZW5kKHRoaXMuYXR0cmlidXRlcywgYXR0cmlidXRlcyk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2UoYXR0cmlidXRlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldChhdHRyaWJ1dGVOYW1lOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNoYW5nZShhdHRyaWJ1dGVzOiB7W2tleTogc3RyaW5nXTogYW55fSkge1xyXG4gICAgICAgIHRoaXMudHJpZ2dlcih0aGlzLmlkICsgJ3VwZGF0ZScsIGF0dHJpYnV0ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIFV0aWwuY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTtcclxuICAgIH1cclxufVxyXG5cclxuVXRpbC5hcHBseU1peGlucyhNb2RlbCwgW0V2ZW50c10pO1xyXG4iLCJleHBvcnQgY2xhc3MgVXRpbCB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHVuaXF1ZUlkKHByZWZpeDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAgICAgdmFyIGNoYXJTZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcclxuICAgICAgICAgICAgdmFyIGxlbiA9IDg7XHJcbiAgICAgICAgICAgIHZhciByYW5kb21TdHJpbmcgPSAnJztcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhbmRvbVBveiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJTZXQubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHJhbmRvbVN0cmluZyArPSBjaGFyU2V0LnN1YnN0cmluZyhyYW5kb21Qb3osIHJhbmRvbVBveiArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtwcmVmaXh9LSR7cmFuZG9tU3RyaW5nfWA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBleHRlbmQoZnJvbTogYW55LCB0bzogYW55KTogT2JqZWN0IHtcclxuICAgICAgICAgICAgdmFyIGk6IHN0cmluZztcclxuICAgICAgICAgICAgZm9yIChpIGluIHRvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG8uaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tW2ldID0gdG9baV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY2xvbmUob2JqOiBPYmplY3QpOiBPYmplY3Qge1xyXG4gICAgICAgIHJldHVybiAoPGFueT5PYmplY3QpLmNsb25lKG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBlYWNoKG9iajogYW55LCBjYWxsYmFjazogRnVuY3Rpb24pIHtcclxuICAgICAgICBpZiAoKDxhbnlbXT5vYmopLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW10uZm9yRWFjaC5jYWxsKG9iaiwgY2FsbGJhY2spO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyg8T2JqZWN0Pm9iaikuZm9yRWFjaChmdW5jdGlvbihrZXk6IHN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soa2V5LCBvYmpba2V5XSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGRvbVNlbGVjdG9yKHNlbGVjdG9yOiBzdHJpbmcpOiBOb2RlTGlzdE9mPEVsZW1lbnQ+IHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBhcHBseU1peGlucyhkZXJpdmVkQ3RvcjogYW55LCBiYXNlQ3RvcnM6IGFueVtdKSB7XHJcbiAgICAgICAgYmFzZUN0b3JzLmZvckVhY2goYmFzZUN0b3IgPT4ge1xyXG4gICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiYXNlQ3Rvci5wcm90b3R5cGUpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkZXJpdmVkQ3Rvci5wcm90b3R5cGVbbmFtZV0gPSBiYXNlQ3Rvci5wcm90b3R5cGVbbmFtZV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7RXZlbnRzfSBmcm9tICcuL0V2ZW50cyc7XHJcbmltcG9ydCB7VXRpbH0gZnJvbSAnLi9VdGlsJztcclxuaW1wb3J0IHtNb2RlbH0gZnJvbSBcIi4vTW9kZWxcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3IGltcGxlbWVudHMgRXZlbnRzIHtcclxuICAgIHByb3RlY3RlZCBpZDogc3RyaW5nO1xyXG4gICAgcHVibGljIG9ic2VydmU6IChtb2RlbDogTW9kZWwpID0+IHZvaWQ7XHJcbiAgICBwdWJsaWMgaW5pdDogKCkgPT4gdm9pZDtcclxuXHJcbiAgICAvLyBCZWdpbiBFdmVudHMgY2xhc3MuXHJcbiAgICBwdWJsaWMgY2hhbm5lbHM6IHtba2V5OiBzdHJpbmddOiBGdW5jdGlvbn0gPSB7fTtcclxuICAgIHB1YmxpYyBldmVudE51bWJlcjogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyB0cmlnZ2VyOiAoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE6IGFueSkgPT4gdm9pZDtcclxuICAgIHB1YmxpYyBvbjogKGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pID0+IHZvaWQ7XHJcbiAgICBwdWJsaWMgb2ZmOiAodG9waWM6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIC8vIEVuZCBFdmVudHMgY2xhc3MuXHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczoge1trZXk6IHN0cmluZ106IGFueX0pIHtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbC51bmlxdWVJZCgndmlldycpO1xyXG4gICAgICAgIFV0aWwuZXh0ZW5kKHRoaXMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5VdGlsLmFwcGx5TWl4aW5zKFZpZXcsIFtFdmVudHNdKTtcclxuIiwiaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi9Nb2RlbCc7XHJcbmltcG9ydCB7Vmlld30gZnJvbSAnLi9WaWV3JztcclxuaW1wb3J0IHtDb250cm9sbGVyfSBmcm9tICcuL0NvbnRyb2xsZXInO1xyXG5cclxudmFyIGhvbWVNb2RlbCA9IG5ldyBNb2RlbCh7XHJcbiAgICB0aXRsZTogJ1RoaXMgaXMgdGhlIHRpdGxlJyxcclxuICAgIHVwZGF0ZVRpdGxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBob21lTW9kZWwuc2V0KHt0aXRsZTogaG9tZU1vZGVsLmdldCgndGl0bGUnKSArICcgVVBEQVRFRCd9KTtcclxuICAgIH1cclxufSk7XHJcblxyXG52YXIgaG9tZVZpZXcgPSBuZXcgVmlldyh7XHJcbiAgICBlbDogJyNpbmRleCcsXHJcbiAgICB0ZW1wbGF0ZTogSGFuZGxlYmFycy5jb21waWxlKCc8aDEgaWQ9XCJ0aXRsZVwiPnt7dGl0bGV9fTwvaDE+JyksXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uIChkYXRhOiBhbnkpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnVmlldyBhYm91dCB0byByZW5kZXIuJywgZGF0YSk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykuaW5uZXJUZXh0ID0gZGF0YS50aXRsZTtcclxuICAgIH0sXHJcbiAgICBvYnNlcnZlOiBmdW5jdGlvbihtb2RlbDogTW9kZWwpIHtcclxuICAgICAgICBtb2RlbC5vbihtb2RlbC5pZCArICd1cGRhdGUnLCB0aGlzLnJlbmRlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufSk7XHJcblxyXG52YXIgaG9tZUNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlcih7XHJcbiAgICBtb2RlbDogaG9tZU1vZGVsLFxyXG4gICAgdmlldzogaG9tZVZpZXcsXHJcbiAgICBldmVudHM6IHtcclxuICAgICAgICAnI3RpdGxlLmNsaWNrJzogJ3VwZGF0ZVRpdGxlJ1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZVRpdGxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzLnVwZGF0ZVRpdGxlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy52aWV3Lm9ic2VydmUodGhpcy5tb2RlbCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuKDxhbnk+aG9tZUNvbnRyb2xsZXIuaW5pdCgpKTtcclxuIl19
