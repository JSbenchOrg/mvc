(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var Events_1 = require('./Events');
var Util_1 = require('./Util');
var Controller = (function () {
    function Controller(options) {
        this.channels = {};
        this.eventNumber = 0;
        this.id = Util_1.Util.uniqueId('controller');
        Util_1.Util.extend(this, options);
    }
    Controller.prototype.addEvents = function () {
        var _this = this;
        var parts;
        var selector;
        var eventType;
        Util_1.Util.each(this.events, function (eventName, method) {
            parts = eventName.split('.');
            selector = parts[0];
            eventType = parts[1];
            console.log(Util_1.Util.domSelector(selector));
            Util_1.Util.each(Util_1.Util.domSelector(selector), function ($node) {
                console.log($node);
                $node.addEventListener(eventType, _this[method].bind(_this));
            });
        });
    };
    Controller.prototype.init = function () {
        this.view.render(this.model.toJSON());
        this.view.observe(this.model);
        if (this.events) {
            this.addEvents();
        }
        return this;
    };
    return Controller;
}());
exports.Controller = Controller;
Util_1.Util.applyMixins(Controller, [Events_1.Events]);
},{"./Events":2,"./Util":4}],2:[function(require,module,exports){
"use strict";
var Events = (function () {
    function Events() {
    }
    Events.prototype.trigger = function (eventName, data) {
        for (var topic in this.channels) {
            if (this.channels.hasOwnProperty(topic)) {
                if (topic.split('-', 2).join('-') === eventName) {
                    this.channels[topic](data) !== false || this.off(topic);
                }
            }
        }
    };
    Events.prototype.on = function (eventName, callback) {
        this.channels[eventName + --this.eventNumber] = callback;
    };
    ;
    Events.prototype.off = function (topic) {
        delete this.channels[topic];
    };
    ;
    return Events;
}());
exports.Events = Events;
},{}],3:[function(require,module,exports){
"use strict";
var Events_1 = require('./Events');
var Util_1 = require('./Util');
var Model = (function () {
    function Model(attributes) {
        this.channels = {};
        this.eventNumber = 0;
        this.id = Util_1.Util.uniqueId('model');
        this.attributes = attributes || {};
    }
    Model.prototype.set = function (attributes) {
        Util_1.Util.extend(this.attributes, attributes);
        this.change(attributes);
    };
    Model.prototype.get = function (attributeName) {
        return this.attributes[attributeName];
    };
    Model.prototype.change = function (attributes) {
        this.trigger(this.id + 'update', attributes);
    };
    Model.prototype.toJSON = function () {
        return JSON.parse(JSON.stringify(this.attributes));
    };
    return Model;
}());
exports.Model = Model;
Util_1.Util.applyMixins(Model, [Events_1.Events]);
},{"./Events":2,"./Util":4}],4:[function(require,module,exports){
"use strict";
var Util = (function () {
    function Util() {
    }
    Util.uniqueId = function (prefix) {
        var charSet = 'abcdefghijklmnopqrstuvwxyz0123456789';
        var len = 8;
        var randomString = '';
        for (var i = 0; i < len; i++) {
            var randomPoz = Math.floor(Math.random() * charSet.length);
            randomString += charSet.substring(randomPoz, randomPoz + 1);
        }
        return prefix + "-" + randomString;
    };
    Util.extend = function (from, to) {
        var i;
        for (i in to) {
            if (to.hasOwnProperty(i)) {
                from[i] = to[i];
            }
        }
        return from;
    };
    Util.each = function (obj, callback) {
        if (obj.length) {
            return [].forEach.call(obj, callback);
        }
        else {
            return Object.keys(obj).forEach(function (key) {
                callback(key, obj[key]);
            });
        }
    };
    Util.domGetElem = function (selector) {
        return document.querySelector(selector);
    };
    Util.domSelector = function (selector) {
        return document.querySelectorAll(selector);
    };
    Util.applyMixins = function (derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
                derivedCtor.prototype[name] = baseCtor.prototype[name];
            });
        });
    };
    return Util;
}());
exports.Util = Util;
},{}],5:[function(require,module,exports){
"use strict";
var Events_1 = require('./Events');
var Util_1 = require('./Util');
var View = (function () {
    function View(options) {
        this.channels = {};
        this.eventNumber = 0;
        this.id = Util_1.Util.uniqueId('view');
        Util_1.Util.extend(this, options);
    }
    return View;
}());
exports.View = View;
Util_1.Util.applyMixins(View, [Events_1.Events]);
},{"./Events":2,"./Util":4}],6:[function(require,module,exports){
"use strict";
var Model_1 = require('./Model');
var View_1 = require('./View');
var Controller_1 = require('./Controller');
var Util_1 = require('./Util');
var homeModel = new Model_1.Model({
    title: 'This is the default title',
    updateTitle: function () {
        homeModel.set({ title: homeModel.get('title') + ' UPDATED' });
    }
});
var homeView = new View_1.View({
    el: '#index',
    template: Handlebars.compile('<h1 id="title">{{title}}</h1>'),
    render: function (data) {
        console.log('View about to render with data:', data);
        Util_1.Util.domGetElem(this.el).innerHTML = this.template(data);
    },
    observe: function (model) {
        model.on(model.id + 'update', this.render.bind(this));
        return this;
    }
});
var homeController = new Controller_1.Controller({
    model: homeModel,
    view: homeView,
    events: {
        '#title.click': 'updateTitle'
    },
    updateTitle: function () {
        this.model.attributes.updateTitle();
        return this;
    }
});
homeController.init();
},{"./Controller":1,"./Model":3,"./Util":4,"./View":5}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWIvQ29udHJvbGxlci50cyIsImxpYi9FdmVudHMudHMiLCJsaWIvTW9kZWwudHMiLCJsaWIvVXRpbC50cyIsImxpYi9WaWV3LnRzIiwibGliL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBLHVCQUFxQixVQUFVLENBQUMsQ0FBQTtBQUNoQyxxQkFBbUIsUUFBUSxDQUFDLENBQUE7QUFJNUI7SUFnQkksb0JBQVksT0FBOEI7UUFQbkMsYUFBUSxHQUE4QixFQUFFLENBQUM7UUFDekMsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFPM0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxXQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBR3RDLFdBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFUyw4QkFBUyxHQUFuQjtRQUFBLGlCQWVDO1FBZEcsSUFBSSxLQUFlLENBQUM7UUFDcEIsSUFBSSxRQUFnQixDQUFDO1FBQ3JCLElBQUksU0FBaUIsQ0FBQztRQUV0QixXQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsVUFBQyxTQUFpQixFQUFFLE1BQWM7WUFDckQsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLFdBQUksQ0FBQyxJQUFJLENBQUMsV0FBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFDLEtBQWtCO2dC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QUMsT0FBTyxDQUFDLCtCQUErQixDQUFDO0lBQzdELE1BQU0sRUFBRSxVQUFVLElBQVM7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVyRCxXQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBQ0QsT0FBTyxFQUFFLFVBQVMsS0FBWTtRQUMxQixLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdEQsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0osQ0FBQyxDQUFDO0FBRUgsSUFBSSxjQUFjLEdBQUcsSUFBSSx1QkFBVSxDQUFDO0lBQ2hDLEtBQUssRUFBRSxTQUFTO0lBQ2hCLElBQUksRUFBRSxRQUFRO0lBQ2QsTUFBTSxFQUFFO1FBQ0osY0FBYyxFQUFFLGFBQWE7S0FDaEM7SUFDRCxXQUFXLEVBQUU7UUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSixDQUFDLENBQUM7QUFFRyxjQUFjLENBQUMsSUFBSSxFQUFHLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IHtFdmVudHN9IGZyb20gJy4vRXZlbnRzJztcclxuaW1wb3J0IHtVdGlsfSBmcm9tICcuL1V0aWwnO1xyXG5pbXBvcnQge01vZGVsfSBmcm9tICcuL01vZGVsJztcclxuaW1wb3J0IHtWaWV3fSBmcm9tICcuL1ZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xsZXIgaW1wbGVtZW50cyBFdmVudHMge1xyXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbW9kZWw6IE1vZGVsO1xyXG4gICAgcHVibGljIHZpZXc6IFZpZXc7XHJcbiAgICBwdWJsaWMgZXZlbnRzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfTtcclxuICAgIC8vIHB1YmxpYyBpbml0OiAoKSA9PiB0aGlzO1xyXG4gICAgW2tleTogc3RyaW5nXTogYW55O1xyXG5cclxuICAgIC8vIEJlZ2luIEV2ZW50cyBjbGFzcy5cclxuICAgIHB1YmxpYyBjaGFubmVsczoge1trZXk6IHN0cmluZ106IEZ1bmN0aW9ufSA9IHt9O1xyXG4gICAgcHVibGljIGV2ZW50TnVtYmVyOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIHRyaWdnZXI6IChldmVudE5hbWU6IHN0cmluZywgZGF0YTogYW55KSA9PiB2b2lkO1xyXG4gICAgcHVibGljIG9uOiAoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4gdm9pZDtcclxuICAgIHB1YmxpYyBvZmY6ICh0b3BpYzogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgLy8gRW5kIEV2ZW50cyBjbGFzcy5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiAge1trZXk6IHN0cmluZ106IGFueX0pIHtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbC51bmlxdWVJZCgnY29udHJvbGxlcicpO1xyXG5cclxuICAgICAgICAvLyBBZGQgY3VzdG9tIGtleXMgYXMgcHJvcGVydGllcyBvZiB0aGUgY2xhc3MuXHJcbiAgICAgICAgVXRpbC5leHRlbmQodGhpcywgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFkZEV2ZW50cygpOiB2b2lkIHtcclxuICAgICAgICB2YXIgcGFydHM6IHN0cmluZ1tdO1xyXG4gICAgICAgIHZhciBzZWxlY3Rvcjogc3RyaW5nO1xyXG4gICAgICAgIHZhciBldmVudFR5cGU6IHN0cmluZztcclxuXHJcbiAgICAgICAgVXRpbC5lYWNoKHRoaXMuZXZlbnRzLCAoZXZlbnROYW1lOiBzdHJpbmcsIG1ldGhvZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIHBhcnRzID0gZXZlbnROYW1lLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yID0gcGFydHNbMF07XHJcbiAgICAgICAgICAgIGV2ZW50VHlwZSA9IHBhcnRzWzFdO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhVdGlsLmRvbVNlbGVjdG9yKHNlbGVjdG9yKSk7XHJcbiAgICAgICAgICAgIFV0aWwuZWFjaChVdGlsLmRvbVNlbGVjdG9yKHNlbGVjdG9yKSwgKCRub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgJG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHRoaXNbbWV0aG9kXS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoKTogQ29udHJvbGxlciB7XHJcbiAgICAgICAgLy8gUmVuZGVyIHRoZSB2aWV3IHdpdGggdGhlIGRlZmF1bHQgbW9kZWwgdmFsdWVzLlxyXG4gICAgICAgIHRoaXMudmlldy5yZW5kZXIodGhpcy5tb2RlbC50b0pTT04oKSk7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgdmlldyB3aGVuIG1vZGVsIGNoYW5nZXMuXHJcbiAgICAgICAgdGhpcy52aWV3Lm9ic2VydmUodGhpcy5tb2RlbCk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBldmVudHMgdG8gRE9NIGVsZW1lbnRzLlxyXG4gICAgICAgIGlmICh0aGlzLmV2ZW50cykge1xyXG4gICAgICAgICAgICB0aGlzLmFkZEV2ZW50cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuXHJcblV0aWwuYXBwbHlNaXhpbnMoQ29udHJvbGxlciwgW0V2ZW50c10pO1xyXG4iLCJleHBvcnQgY2xhc3MgRXZlbnRzIHtcclxuICAgIHB1YmxpYyBjaGFubmVsczoge1trZXk6IHN0cmluZ106IEZ1bmN0aW9ufTtcclxuICAgIHB1YmxpYyBldmVudE51bWJlcjogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyB0cmlnZ2VyKGV2ZW50TmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCB0b3BpYyBpbiB0aGlzLmNoYW5uZWxzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWxzLmhhc093blByb3BlcnR5KHRvcGljKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvcGljLnNwbGl0KCctJywgMikuam9pbignLScpID09PSBldmVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWxzW3RvcGljXShkYXRhKSAhPT0gZmFsc2UgfHwgdGhpcy5vZmYodG9waWMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbihldmVudE5hbWU6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsc1tldmVudE5hbWUgKyAtLXRoaXMuZXZlbnROdW1iZXJdID0gY2FsbGJhY2s7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBvZmYodG9waWM6IHN0cmluZykge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNoYW5uZWxzW3RvcGljXTtcclxuICAgIH07XHJcbn1cclxuXHJcbiIsImltcG9ydCB7RXZlbnRzfSBmcm9tICcuL0V2ZW50cyc7XHJcbmltcG9ydCB7VXRpbH0gZnJvbSAnLi9VdGlsJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNb2RlbCBpbXBsZW1lbnRzIEV2ZW50cyB7XHJcbiAgICBwdWJsaWMgaWQ6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBhdHRyaWJ1dGVzOiB7W2tleTogc3RyaW5nXTogYW55fTtcclxuXHJcbiAgICAvLyBCZWdpbiBFdmVudHMgY2xhc3MuXHJcbiAgICBwdWJsaWMgY2hhbm5lbHM6IHtba2V5OiBzdHJpbmddOiBGdW5jdGlvbn0gPSB7fTtcclxuICAgIHB1YmxpYyBldmVudE51bWJlcjogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyB0cmlnZ2VyOiAoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE6IGFueSkgPT4gdm9pZDtcclxuICAgIHB1YmxpYyBvbjogKGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pID0+IHZvaWQ7XHJcbiAgICBwdWJsaWMgb2ZmOiAodG9waWM6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIC8vIEVuZCBFdmVudHMgY2xhc3MuXHJcblxyXG4gICAgY29uc3RydWN0b3IoYXR0cmlidXRlczoge1trZXk6IHN0cmluZ106IGFueX0pIHtcclxuICAgICAgICB0aGlzLmlkID0gVXRpbC51bmlxdWVJZCgnbW9kZWwnKTtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzIHx8IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQoYXR0cmlidXRlczoge1trZXk6IHN0cmluZ106IGFueX0pIHtcclxuICAgICAgICBVdGlsLmV4dGVuZCh0aGlzLmF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlKGF0dHJpYnV0ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQoYXR0cmlidXRlTmFtZTogc3RyaW5nKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGFuZ2UoYXR0cmlidXRlczoge1trZXk6IHN0cmluZ106IGFueX0pIHtcclxuICAgICAgICB0aGlzLnRyaWdnZXIodGhpcy5pZCArICd1cGRhdGUnLCBhdHRyaWJ1dGVzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuYXR0cmlidXRlcykpO1xyXG4gICAgfVxyXG59XHJcblxyXG5VdGlsLmFwcGx5TWl4aW5zKE1vZGVsLCBbRXZlbnRzXSk7XHJcbiIsImV4cG9ydCBjbGFzcyBVdGlsIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgdW5pcXVlSWQocHJlZml4OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICB2YXIgY2hhclNldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xyXG4gICAgICAgICAgICB2YXIgbGVuID0gODtcclxuICAgICAgICAgICAgdmFyIHJhbmRvbVN0cmluZyA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmFuZG9tUG96ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhclNldC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgcmFuZG9tU3RyaW5nICs9IGNoYXJTZXQuc3Vic3RyaW5nKHJhbmRvbVBveiwgcmFuZG9tUG96ICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0tJHtyYW5kb21TdHJpbmd9YDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGV4dGVuZChmcm9tOiBhbnksIHRvOiBhbnkpOiBPYmplY3Qge1xyXG4gICAgICAgICAgICB2YXIgaTogc3RyaW5nO1xyXG4gICAgICAgICAgICBmb3IgKGkgaW4gdG8pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0by5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21baV0gPSB0b1tpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZyb207XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHVibGljIHN0YXRpYyBjbG9uZShvYmo6IE9iamVjdCk6IE9iamVjdCB7XHJcbiAgICAvLyAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShvYmopO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZWFjaChvYmo6IGFueSwgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCg8YW55W10+b2JqKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdLmZvckVhY2guY2FsbChvYmosIGNhbGxiYWNrKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoPE9iamVjdD5vYmopLmZvckVhY2goZnVuY3Rpb24oa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGtleSwgb2JqW2tleV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBkb21HZXRFbGVtKHNlbGVjdG9yOiBzdHJpbmcpOiBFbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBkb21TZWxlY3RvcihzZWxlY3Rvcjogc3RyaW5nKTogTm9kZUxpc3RPZjxFbGVtZW50PiB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgYXBwbHlNaXhpbnMoZGVyaXZlZEN0b3I6IGFueSwgYmFzZUN0b3JzOiBhbnlbXSkge1xyXG4gICAgICAgIGJhc2VDdG9ycy5mb3JFYWNoKGJhc2VDdG9yID0+IHtcclxuICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYmFzZUN0b3IucHJvdG90eXBlKS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGVyaXZlZEN0b3IucHJvdG90eXBlW25hbWVdID0gYmFzZUN0b3IucHJvdG90eXBlW25hbWVdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge0V2ZW50c30gZnJvbSAnLi9FdmVudHMnO1xyXG5pbXBvcnQge1V0aWx9IGZyb20gJy4vVXRpbCc7XHJcbmltcG9ydCB7TW9kZWx9IGZyb20gXCIuL01vZGVsXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVmlldyBpbXBsZW1lbnRzIEV2ZW50cyB7XHJcbiAgICBwcm90ZWN0ZWQgaWQ6IHN0cmluZztcclxuICAgIHB1YmxpYyBvYnNlcnZlOiAobW9kZWw6IE1vZGVsKSA9PiB2b2lkO1xyXG4gICAgcHVibGljIGluaXQ6ICgpID0+IHZvaWQ7XHJcbiAgICBwdWJsaWMgcmVuZGVyOiAoZGF0YTogYW55KSA9PiB2b2lkO1xyXG5cclxuICAgIC8vIEJlZ2luIEV2ZW50cyBjbGFzcy5cclxuICAgIHB1YmxpYyBjaGFubmVsczoge1trZXk6IHN0cmluZ106IEZ1bmN0aW9ufSA9IHt9O1xyXG4gICAgcHVibGljIGV2ZW50TnVtYmVyOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIHRyaWdnZXI6IChldmVudE5hbWU6IHN0cmluZywgZGF0YTogYW55KSA9PiB2b2lkO1xyXG4gICAgcHVibGljIG9uOiAoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikgPT4gdm9pZDtcclxuICAgIHB1YmxpYyBvZmY6ICh0b3BpYzogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgLy8gRW5kIEV2ZW50cyBjbGFzcy5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiB7W2tleTogc3RyaW5nXTogYW55fSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBVdGlsLnVuaXF1ZUlkKCd2aWV3Jyk7XHJcbiAgICAgICAgVXRpbC5leHRlbmQodGhpcywgb3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuXHJcblV0aWwuYXBwbHlNaXhpbnMoVmlldywgW0V2ZW50c10pO1xyXG4iLCJpbXBvcnQge01vZGVsfSBmcm9tICcuL01vZGVsJztcclxuaW1wb3J0IHtWaWV3fSBmcm9tICcuL1ZpZXcnO1xyXG5pbXBvcnQge0NvbnRyb2xsZXJ9IGZyb20gJy4vQ29udHJvbGxlcic7XHJcbmltcG9ydCB7VXRpbH0gZnJvbSAnLi9VdGlsJztcclxuXHJcbnZhciBob21lTW9kZWwgPSBuZXcgTW9kZWwoe1xyXG4gICAgdGl0bGU6ICdUaGlzIGlzIHRoZSBkZWZhdWx0IHRpdGxlJyxcclxuICAgIHVwZGF0ZVRpdGxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBob21lTW9kZWwuc2V0KHt0aXRsZTogaG9tZU1vZGVsLmdldCgndGl0bGUnKSArICcgVVBEQVRFRCd9KTtcclxuICAgIH1cclxufSk7XHJcblxyXG52YXIgaG9tZVZpZXcgPSBuZXcgVmlldyh7XHJcbiAgICBlbDogJyNpbmRleCcsXHJcbiAgICB0ZW1wbGF0ZTogSGFuZGxlYmFycy5jb21waWxlKCc8aDEgaWQ9XCJ0aXRsZVwiPnt7dGl0bGV9fTwvaDE+JyksXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uIChkYXRhOiBhbnkpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnVmlldyBhYm91dCB0byByZW5kZXIgd2l0aCBkYXRhOicsIGRhdGEpO1xyXG4gICAgICAgIC8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpLmlubmVyVGV4dCA9IGRhdGEudGl0bGU7XHJcbiAgICAgICAgVXRpbC5kb21HZXRFbGVtKHRoaXMuZWwpLmlubmVySFRNTCA9IHRoaXMudGVtcGxhdGUoZGF0YSk7XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24obW9kZWw6IE1vZGVsKSB7XHJcbiAgICAgICAgbW9kZWwub24obW9kZWwuaWQgKyAndXBkYXRlJywgdGhpcy5yZW5kZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxudmFyIGhvbWVDb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXIoe1xyXG4gICAgbW9kZWw6IGhvbWVNb2RlbCxcclxuICAgIHZpZXc6IGhvbWVWaWV3LFxyXG4gICAgZXZlbnRzOiB7XHJcbiAgICAgICAgJyN0aXRsZS5jbGljayc6ICd1cGRhdGVUaXRsZSdcclxuICAgIH0sXHJcbiAgICB1cGRhdGVUaXRsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubW9kZWwuYXR0cmlidXRlcy51cGRhdGVUaXRsZSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbig8YW55PmhvbWVDb250cm9sbGVyLmluaXQoKSk7XHJcbiJdfQ==
